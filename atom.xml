<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator><title type="html"><![CDATA[首页 on 焉知非鱼]]></title>
    
    
    
            <link href="https://ohmypanda.github.io/atom.xml" rel="self" type="application/rss+xml" title="atom" />
            <link href="https://ohmypanda.github.io/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmypanda.github.io/index.json" rel="alternate" type="application/json" title="JSON" />
    <updated>2020-05-14T16:20:17+08:00</updated>
    
    
    
    
        <id>https://ohmypanda.github.io/atom.xml</id>
    
        
        <entry>
            <title type="html"><![CDATA[Awesome]]></title>
            <link href="https://ohmypanda.github.io/2020-05-11/" rel="alternate" type="text/html" />
            
            
                <id>https://ohmypanda.github.io/2020-05-11/</id>
            
            
            <published>2020-05-11T00:00:00+00:00</published>
            <updated>2020-05-11T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>专门用于记录 Raku 中的 Awesome。</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/awesome" term="awesome" label="Awesome" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[使用 %% 提取文本块儿]]></title>
            <link href="https://ohmypanda.github.io/extract-sections-with-double-percent/" rel="alternate" type="text/html" />
            
                <link href="https://ohmypanda.github.io/extract-sections-again/" rel="related" type="text/html" title="再用 %% 提取文本块儿" />
                <link href="https://ohmypanda.github.io/extract-sections/" rel="related" type="text/html" title="提取文本块儿" />
                <link href="https://ohmypanda.github.io/subparse/" rel="related" type="text/html" title="子解析" />
                <link href="https://ohmypanda.github.io/parse-structured-text/" rel="related" type="text/html" title="解析结构化文本" />
                <link href="https://ohmypanda.github.io/calc-lang/" rel="related" type="text/html" title="计算器" />
            
                <id>https://ohmypanda.github.io/extract-sections-with-double-percent/</id>
            
            
            <published>2020-05-06T14:14:08+08:00</published>
            <updated>2020-05-06T14:14:08+08:00</updated>
            
            
            <content type="html"><![CDATA[<h3 id="数据样例">数据样例</h3>
<p>section.txt 中的本文为样例数据:</p>
<pre><code>123,456,789
=begin code
999,333,666
145,123,120
=end code
10,20,30
10,10,10
=begin code
567,555,578
678,679,665
710,720,715
=end code
321,654,987
=begin code
312,555
=end code
</code></pre><p>要求把 <code>=begin code</code> 和 <code>=end code</code> 之间的所有数字分别提取出来。</p>
<h3 id="grammar">Grammar</h3>
<p>Grammar 的结构如下, 其中 Section 目录下分别是 Grammar 和 Action 模块, data 目录下是样例数据 section.txt:</p>
<pre><code>├── Section
│   ├── Actions.pm6
│   └── Grammar.pm6
├── data
│   ├── section.txt
├── extract-section.p6
</code></pre><pre><code class="language-perl6" data-lang="perl6">use Grammar::Debugger;
use Grammar::Tracer;

unit grammar Section::Grammar;

token TOP {
   ^  &lt;section&gt;+ %% &lt;separator&gt; $
}

token section {
    &lt;line&gt;+
}

token line {
   ^^ [\d+]+ %% ',' $$ \n
}

token separator {
    |  ^^ '=begin code' $$ \n
    |  ^^ '=end code' $$ \n*
}
</code></pre><p>其中 <code>Grammar::Debugger</code> 和 <code>Grammar::Tracer</code> 模块用于调试 grammar, 需要放在 grammar 模块的行首:</p>
<pre><code class="language-perl6" data-lang="perl6">use Grammar::Debugger;
use Grammar::Tracer;
</code></pre><h3 id="action">Action</h3>
<pre><code class="language-perl6" data-lang="perl6">unit class Section::Actions;

method TOP($/) {
     make $/.values».made;
}

method section($/) {
    make ~$/.trim;
}

method line($/) {
    make ~$/.trim;
}

method separator($/) {
    make Empty;
}
</code></pre><h3 id="解析">解析</h3>
<h4 id="不使用-action">不使用 Action</h4>
<pre><code class="language-perl6" data-lang="perl6">use lib '.';
use Section::Grammar;

my $parsed = Section::Grammar.parsefile(@*ARGS[0] // 'data/section.txt');
.Str.say for $parsed&lt;section&gt;;
</code></pre><h4 id="输出">输出</h4>
<pre><code>123,456,789

999,333,666
145,123,120

10,20,30
10,10,10

567,555,578
678,679,665
710,720,715

321,654,987

312,555
</code></pre><h4 id="使用-action">使用 Action</h4>
<pre><code class="language-perl6" data-lang="perl6">use lib '.';
use Section::Grammar;
use Section::Actions;

my $parsed = Section::Grammar.parsefile(
    @*ARGS[0] // 'data/section.txt',
    :actions(Section::Actions)
).made;

.Str.say for @$parsed;
</code></pre><h4 id="输出-1">输出</h4>
<pre><code>123,456,789
999,333,666
145,123,120
10,20,30
10,10,10
567,555,578
678,679,665
710,720,715
321,654,987
312,555
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[再用 %% 提取文本块儿]]></title>
            <link href="https://ohmypanda.github.io/extract-sections-again/" rel="alternate" type="text/html" />
            
                <link href="https://ohmypanda.github.io/extract-sections-with-double-percent/" rel="related" type="text/html" title="使用 %% 提取文本块儿" />
                <link href="https://ohmypanda.github.io/extract-sections/" rel="related" type="text/html" title="提取文本块儿" />
                <link href="https://ohmypanda.github.io/subparse/" rel="related" type="text/html" title="子解析" />
                <link href="https://ohmypanda.github.io/parse-structured-text/" rel="related" type="text/html" title="解析结构化文本" />
                <link href="https://ohmypanda.github.io/calc-lang/" rel="related" type="text/html" title="计算器" />
            
                <id>https://ohmypanda.github.io/extract-sections-again/</id>
            
            
            <published>2020-05-06T14:14:08+08:00</published>
            <updated>2020-05-06T14:14:08+08:00</updated>
            
            
            <content type="html"><![CDATA[<h3 id="数据样例">数据样例</h3>
<pre><code>Here's some unimportant text.
=begin code
This code block is what we're after.
We'll use 'ff' to get it.
=end code
More unimportant text.
=begin code
I want this line.
and this line as well.
HaHa.
=end code
More unimport text.
=begin code
Let's to go home.
=end code
</code></pre><h3 id="grammar">Grammar</h3>
<pre><code class="language-perl6" data-lang="perl6">use Grammar::Debugger;
use Grammar::Tracer;

unit grammar Range::Grammar;

token TOP {
   ^  &lt;un-important-line&gt;+ %% &lt;section&gt; $
}

token section {
   &lt;begin&gt; ~ &lt;end&gt; &lt;line&gt;+?
}

token un-important-line {
    ^^ \N+ )&gt; \n*
}

token line {
    ^^ \N+ )&gt; \n*
}

token begin {
    ^^ '=begin code' $$ \n*
}

token end {
    ^^ '=end code' $$ \n*
}
</code></pre><h3 id="action">Action</h3>
<pre><code class="language-perl6" data-lang="perl6">unit class Range::Actions;

method TOP($/) {
     make $/.values».made;
}

method section($/) {
    make $/&lt;line&gt;».made;
}

method line($/) {
    make ~$/.trim;
}

method un-important-line($/) {
    make Empty;
}

method begin($/) {
    make Empty;
}

method end($/) {
    make Empty;
}
</code></pre><h3 id="提取">提取</h3>
<pre><code class="language-perl6" data-lang="perl6">#!/usr/bin/env perl6

use lib '.';
use Range::Grammar;
use Range::Actions;

my $parsed = Range::Grammar.parsefile(
        @*ARGS[0] // 'data/flip-flop.txt',
        :actions(Range::Actions)
        ).made;

for @$parsed -&gt; $line {
    say $line.raku;
    say '-' x 35;
}
</code></pre><h3 id="输出">输出</h3>
<pre><code>$[&quot;This code block is what we're after.&quot;, &quot;We'll use 'ff' to get it.&quot;]
-----------------------------------
$[&quot;I want this line.&quot;, &quot;and this line as well.&quot;, &quot;HaHa.&quot;]
-----------------------------------
$[&quot;Let's to go home.&quot;]
-----------------------------------
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[提取文本块儿]]></title>
            <link href="https://ohmypanda.github.io/extract-sections/" rel="alternate" type="text/html" />
            
                <link href="https://ohmypanda.github.io/subparse/" rel="related" type="text/html" title="子解析" />
                <link href="https://ohmypanda.github.io/parse-structured-text/" rel="related" type="text/html" title="解析结构化文本" />
                <link href="https://ohmypanda.github.io/calc-lang/" rel="related" type="text/html" title="计算器" />
                <link href="https://ohmypanda.github.io/parse-json/" rel="related" type="text/html" title="解析 JSON" />
                <link href="https://ohmypanda.github.io/parse-csv/" rel="related" type="text/html" title="检测 CSV 是否有效" />
            
                <id>https://ohmypanda.github.io/extract-sections/</id>
            
            
            <published>2020-05-05T22:11:48+08:00</published>
            <updated>2020-05-05T22:11:48+08:00</updated>
            
            
            <content type="html"><![CDATA[<h3 id="数据样例">数据样例</h3>
<pre><code>Here's some unimportant text.
=begin code
This code block is what we're after.
We'll use 'ff' to get it.
=end code
More unimportant text.
=begin code
I want this line.
and this line as well.
HaHa
=end code
More unimport text.
=begin code
Let's to go home.
=end code
</code></pre><p>要求提取 <code>=begin code</code> 和 <code>=end code</code> 之间的文本块儿。</p>
<h3 id="grammar">Grammar</h3>
<pre><code class="language-perl6" data-lang="perl6">grammar ExtractSection {
  token start   { ^^ '=begin code' \n          }
  token finish  { ^^ '=end code' \n            }
  token line    { ^^ \N+)&gt; \n                  }
  token section { &lt;start&gt; ~ &lt;finish&gt; &lt;line&gt;+?  }
  token comment { ^^\N+ \n                     }
  token TOP     { [&lt;section&gt; || &lt;comment&gt;]+    } 
}
</code></pre><h3 id="action">Action</h3>
<pre><code class="language-perl6" data-lang="perl6">class ExtractSectionAction {
    method TOP($/)     { make @&lt;section&gt;».ast.List }
    method section($/) { make ~«@&lt;line&gt;.List       }
    method line($/)    { make ~$/.trim             }
    method comment($/) { make Empty                }
}
</code></pre><h3 id="提取">提取</h3>
<pre><code class="language-perl6" data-lang="perl6">my $em = ExtractSection.parse(
    $excerpt, 
    :actions(ExtractSectionAction)
).ast;

for @$em -&gt; $line {
    say $line.perl;
    say '-' x 35;
}
</code></pre><h3 id="输出">输出</h3>
<pre><code>$(&quot;This code block is what we're after.&quot;, &quot;We'll use 'ff' to get it.&quot;)
-----------------------------------
$(&quot;I want this line.&quot;, &quot;and this line as well.&quot;, &quot;HaHa&quot;)
-----------------------------------
$(&quot;Let's to go home.&quot;,)
-----------------------------------
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[子解析]]></title>
            <link href="https://ohmypanda.github.io/subparse/" rel="alternate" type="text/html" />
            
                <link href="https://ohmypanda.github.io/parse-structured-text/" rel="related" type="text/html" title="解析结构化文本" />
                <link href="https://ohmypanda.github.io/calc-lang/" rel="related" type="text/html" title="计算器" />
                <link href="https://ohmypanda.github.io/parse-json/" rel="related" type="text/html" title="解析 JSON" />
                <link href="https://ohmypanda.github.io/parse-csv/" rel="related" type="text/html" title="检测 CSV 是否有效" />
                <link href="https://ohmypanda.github.io/card-game-with-action/" rel="related" type="text/html" title="解析带 Action 的纸牌游戏" />
            
                <id>https://ohmypanda.github.io/subparse/</id>
            
            
            <published>2020-05-05T21:51:42+08:00</published>
            <updated>2020-05-05T21:51:42+08:00</updated>
            
            
            <content type="html"><![CDATA[<h3 id="子解析">子解析</h3>
<p>游标不一定要到达字符串的末尾才算成功。也就是说，它不一定要匹配整个字符串。</p>
<p><code>subparse</code> 总是返回一个 <strong>Match</strong> 对象</p>
<pre><code class="language-perl6" data-lang="perl6">method subparse(
    $target, 
    :$rule = 'TOP', 
    Capture() :$args = \(),  
    Mu :$actions = Mu, 
    *%opt
)
</code></pre><h3 id="grammar">Grammar</h3>
<pre><code class="language-perl6" data-lang="perl6">grammar RepeatChar {
    token start($character) { $character+ }
}
</code></pre><h3 id="解析">解析</h3>
<pre><code class="language-perl6" data-lang="perl6">say RepeatChar.subparse(
    'bbbabb', 
    :rule('start'), 
    :args(\('b'))
);          # ｢bbb｣

say RepeatChar.parse(
    'bbbabb', 
    :rule('start'), 
    :args(\('b'))
);          # Nil

say RepeatChar.subparse(
    'bbbabb', 
    :rule('start'), 
    :args(\('a'))
);          # &lt;failed match&gt;

say RepeatChar.subparse(
    'bbbabb', 
    :rule('start'), 
    :args(\('a')), 
    :pos(3)
);          # ｢a｣
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
</feed>
