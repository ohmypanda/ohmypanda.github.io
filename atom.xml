<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <generator uri="https://gohugo.io/" version="0.63.2">Hugo</generator><title type="html"><![CDATA[首页 on 焉知非鱼]]></title>
    
    
    
            <link href="https://ohmypanda.github.io/atom.xml" rel="self" type="application/rss+xml" title="atom" />
            <link href="https://ohmypanda.github.io/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://ohmypanda.github.io/index.json" rel="alternate" type="application/json" title="JSON" />
    <updated>2020-06-10T22:50:44+08:00</updated>
    
    
    
    
        <id>https://ohmypanda.github.io/atom.xml</id>
    
        
        <entry>
            <title type="html"><![CDATA[Rust]]></title>
            <link href="https://ohmypanda.github.io/2020-06-10/" rel="alternate" type="text/html" />
            
            
                <id>https://ohmypanda.github.io/2020-06-10/</id>
            
            
            <published>2020-06-10T00:00:00+00:00</published>
            <updated>2020-06-10T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>太难了，Rust 太难了。
Rust 怎么这么难啊！
真的太难了。
磕学家才学得会。</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/rust" term="rust" label="Rust" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[大兴]]></title>
            <link href="https://ohmypanda.github.io/2020-06-09/" rel="alternate" type="text/html" />
            
            
                <id>https://ohmypanda.github.io/2020-06-09/</id>
            
            
            <published>2020-06-09T00:00:00+00:00</published>
            <updated>2020-06-09T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>照片:</p>
<p><img loading='lazy' src="https://s3-img.meituan.net/v1/mss_3d027b52ec5a4d589e68050845611e68/ff/n0/0k/gn/w7_268692.jpg@596w_1l.jpg" alt="img"  /></p>
<p><img loading='lazy' src="https://s3-img.meituan.net/v1/mss_3d027b52ec5a4d589e68050845611e68/ff/n0/0k/gn/wa_268705.jpg@596w_1l.jpg" alt="img"  /></p>
<p><img loading='lazy' src="https://s3-img.meituan.net/v1/mss_3d027b52ec5a4d589e68050845611e68/ff/n0/0k/gn/v2_268537.jpg@596w_1l.jpg" alt="img"  /></p>
<p><img loading='lazy' src="https://s3-img.meituan.net/v1/mss_3d027b52ec5a4d589e68050845611e68/ff/n0/0k/gn/tv_268496.jpg@596w_1l.jpg" alt="img"  /></p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/%E5%A4%A7%E5%85%B4" term="%E5%A4%A7%E5%85%B4" label="大兴" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[提取 ipconfig 命令的部分输出]]></title>
            <link href="https://ohmypanda.github.io/extract-ipconfig/" rel="alternate" type="text/html" />
            
                <link href="https://ohmypanda.github.io/extract-sections-with-double-percent/" rel="related" type="text/html" title="使用 %% 提取文本块儿" />
                <link href="https://ohmypanda.github.io/extract-sections-again/" rel="related" type="text/html" title="再用 %% 提取文本块儿" />
                <link href="https://ohmypanda.github.io/extract-sections/" rel="related" type="text/html" title="提取文本块儿" />
                <link href="https://ohmypanda.github.io/subparse/" rel="related" type="text/html" title="子解析" />
                <link href="https://ohmypanda.github.io/parse-structured-text/" rel="related" type="text/html" title="解析结构化文本" />
            
                <id>https://ohmypanda.github.io/extract-ipconfig/</id>
            
            
            <published>2020-05-19T23:41:33+08:00</published>
            <updated>2020-05-19T23:41:33+08:00</updated>
            
            
            <content type="html"><![CDATA[<h3 id="数据样例">数据样例</h3>
<p>下面这段文本是 <code>IPCONFIG /ALL</code> 命令的输出结果:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Windows IP 配置

   主机名  . . . . . . . . . . . . . : Win10-2020QJFDK
   主 DNS 后缀 . . . . . . . . . . . : 
   节点类型  . . . . . . . . . . . . : 混合
   IP 路由已启用 . . . . . . . . . . : 否
   WINS 代理已启用 . . . . . . . . . : 否

以太网适配器 本地连接* 9:

   媒体状态  . . . . . . . . . . . . : 媒体已断开连接
   连接特定的 DNS 后缀 . . . . . . . : 
   描述. . . . . . . . . . . . . . . : Sangfor SSL VPN CS Support System VNIC
   物理地址. . . . . . . . . . . . . : 00-FF-05-0D-13-A2
   DHCP 已启用 . . . . . . . . . . . : 否
   自动配置已启用. . . . . . . . . . : 是

无线局域网适配器 WLAN:

   媒体状态  . . . . . . . . . . . . : 媒体已断开连接
   连接特定的 DNS 后缀 . . . . . . . : 
   描述. . . . . . . . . . . . . . . : Realtek RTL8192EU Wireless LAN 802.11n USB 2.0 Network Adapter
   物理地址. . . . . . . . . . . . . : 30-B4-9E-40-FF-0C
   DHCP 已启用 . . . . . . . . . . . : 是
   自动配置已启用. . . . . . . . . . : 是

无线局域网适配器 本地连接* 10:

   媒体状态  . . . . . . . . . . . . : 媒体已断开连接
   连接特定的 DNS 后缀 . . . . . . . : 
   描述. . . . . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter
   物理地址. . . . . . . . . . . . . : 32-B4-9E-40-FF-0C
   DHCP 已启用 . . . . . . . . . . . : 是
   自动配置已启用. . . . . . . . . . : 是

以太网适配器 以太网:

   连接特定的 DNS 后缀 . . . . . . . : 
   描述. . . . . . . . . . . . . . . : Realtek PCIe GBE Family Controller
   物理地址. . . . . . . . . . . . . : 54-E1-AD-48-66-22
   DHCP 已启用 . . . . . . . . . . . : 否
   自动配置已启用. . . . . . . . . . : 是
   本地链接 IPv6 地址. . . . . . . . : fe80::4195:49da:a7ec:9e68%6(首选) 
   IPv4 地址 . . . . . . . . . . . . : 192.168.0.68(首选) 
   子网掩码  . . . . . . . . . . . . : 255.255.255.0
   默认网关. . . . . . . . . . . . . : 192.168.0.1
   DHCPv6 IAID . . . . . . . . . . . : 324329901
   DHCPv6 客户端 DUID  . . . . . . . : 00-01-00-01-26-4E-B2-11-54-E1-AD-48-66-22
   DNS 服务器  . . . . . . . . . . . : 61.128.128.68
   TCPIP 上的 NetBIOS  . . . . . . . : 已启用
</code></pre></div><p>分别提取含有&quot;适配器&quot;文字下面的「描述」、「物理地址」、「IP地址」、「子网掩码」、「默认网关」、「DNS 服务器」等信息。某些适配器下面可能实际没有「IP地址」、「子网掩码」、「默认网关」、「DNS 服务器」等，有就提取，没有就略过。</p>
<h3 id="grammar">Grammar</h3>
<pre><code class="language-raku" data-lang="raku">unit grammar IPConfig::Grammar;

token TOP { &lt;section&gt;+ %% \n* }
token section {
    &lt;header&gt;
    \n
    &lt;config&gt;+
}

token header { ^^ \N+  \n         }
token config { ^^ \s+ \N+ $$ \n*  }
</code></pre><h3 id="action">Action</h3>
<pre><code class="language-raku" data-lang="raku">unit class IPConfig::Action;

method TOP($/) {
    make $/&lt;section&gt;».made;
}

method section($/) {
    my $configs = $/&lt;config&gt;».made;
    if $configs.elems &gt; 0 {
        make ~$/&lt;header&gt;  ~ $configs.join('');
    } else {
        make Empty;
    }
}

method header($/) {
    make ~$/;
}

method config($/ is copy) {
    my $text = ~$/;
    if $text.contains(/'描述' | '物理地址' | IPv[4|6] ' ' 地址 | '子网掩码' | DNS ' ' 服务器/) {
         $/.make(~$/);
    } else {
        make Empty;
    }
}
</code></pre><h3 id="提取脚本">提取脚本</h3>
<pre><code class="language-raku" data-lang="raku">use lib '.';
use IPConfig::Grammar;
use IPConfig::Action;

my $ipconfig = IPConfig::Grammar.parsefile(
    &quot;data/ifconfig.txt&quot;,
    :actions(IPConfig::Action)
).made;

.Str.say for @$ipconfig;
</code></pre><h3 id="输出">输出</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">以太网适配器 本地连接* 9:
   描述. . . . . . . . . . . . . . . : Sangfor SSL VPN CS Support System VNIC
   物理地址. . . . . . . . . . . . . : 00-FF-05-0D-13-A2

无线局域网适配器 WLAN:
   描述. . . . . . . . . . . . . . . : Realtek RTL8192EU Wireless LAN 802.11n USB 2.0 Network Adapter
   物理地址. . . . . . . . . . . . . : 30-B4-9E-40-FF-0C

无线局域网适配器 本地连接* 10:
   描述. . . . . . . . . . . . . . . : Microsoft Wi-Fi Direct Virtual Adapter
   物理地址. . . . . . . . . . . . . : 32-B4-9E-40-FF-0C

以太网适配器 以太网:
   描述. . . . . . . . . . . . . . . : Realtek PCIe GBE Family Controller
   物理地址. . . . . . . . . . . . . : 54-E1-AD-48-66-22
   本地链接 IPv6 地址. . . . . . . . : fe80::4195:49da:a7ec:9e68%6(首选) 
   IPv4 地址 . . . . . . . . . . . . : 192.168.0.68(首选) 
   子网掩码  . . . . . . . . . . . . : 255.255.255.0
   默认网关. . . . . . . . . . . . . : 192.168.0.1
   DNS 服务器  . . . . . . . . . . . : 61.128.128.68
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Awesome]]></title>
            <link href="https://ohmypanda.github.io/2020-05-11/" rel="alternate" type="text/html" />
            
            
                <id>https://ohmypanda.github.io/2020-05-11/</id>
            
            
            <published>2020-05-11T00:00:00+00:00</published>
            <updated>2020-05-11T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>专门用于记录 Raku 中的 Awesome。</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/awesome" term="awesome" label="Awesome" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[使用 %% 提取文本块儿]]></title>
            <link href="https://ohmypanda.github.io/extract-sections-with-double-percent/" rel="alternate" type="text/html" />
            
                <link href="https://ohmypanda.github.io/extract-sections-again/" rel="related" type="text/html" title="再用 %% 提取文本块儿" />
                <link href="https://ohmypanda.github.io/extract-sections/" rel="related" type="text/html" title="提取文本块儿" />
                <link href="https://ohmypanda.github.io/subparse/" rel="related" type="text/html" title="子解析" />
                <link href="https://ohmypanda.github.io/parse-structured-text/" rel="related" type="text/html" title="解析结构化文本" />
                <link href="https://ohmypanda.github.io/calc-lang/" rel="related" type="text/html" title="计算器" />
            
                <id>https://ohmypanda.github.io/extract-sections-with-double-percent/</id>
            
            
            <published>2020-05-06T14:14:08+08:00</published>
            <updated>2020-05-06T14:14:08+08:00</updated>
            
            
            <content type="html"><![CDATA[<h3 id="数据样例">数据样例</h3>
<p>section.txt 中的本文为样例数据:</p>
<pre><code>123,456,789
=begin code
999,333,666
145,123,120
=end code
10,20,30
10,10,10
=begin code
567,555,578
678,679,665
710,720,715
=end code
321,654,987
=begin code
312,555
=end code
</code></pre><p>要求把 <code>=begin code</code> 和 <code>=end code</code> 之间的所有数字分别提取出来。</p>
<h3 id="grammar">Grammar</h3>
<p>Grammar 的结构如下, 其中 Section 目录下分别是 Grammar 和 Action 模块, data 目录下是样例数据 section.txt:</p>
<pre><code>├── Section
│   ├── Actions.pm6
│   └── Grammar.pm6
├── data
│   ├── section.txt
├── extract-section.p6
</code></pre><pre><code class="language-perl6" data-lang="perl6">use Grammar::Debugger;
use Grammar::Tracer;

unit grammar Section::Grammar;

token TOP {
   ^  &lt;section&gt;+ %% &lt;separator&gt; $
}

token section {
    &lt;line&gt;+
}

token line {
   ^^ [\d+]+ %% ',' $$ \n
}

token separator {
    |  ^^ '=begin code' $$ \n
    |  ^^ '=end code' $$ \n*
}
</code></pre><p>其中 <code>Grammar::Debugger</code> 和 <code>Grammar::Tracer</code> 模块用于调试 grammar, 需要放在 grammar 模块的行首:</p>
<pre><code class="language-perl6" data-lang="perl6">use Grammar::Debugger;
use Grammar::Tracer;
</code></pre><h3 id="action">Action</h3>
<pre><code class="language-perl6" data-lang="perl6">unit class Section::Actions;

method TOP($/) {
     make $/.values».made;
}

method section($/) {
    make ~$/.trim;
}

method line($/) {
    make ~$/.trim;
}

method separator($/) {
    make Empty;
}
</code></pre><h3 id="解析">解析</h3>
<h4 id="不使用-action">不使用 Action</h4>
<pre><code class="language-perl6" data-lang="perl6">use lib '.';
use Section::Grammar;

my $parsed = Section::Grammar.parsefile(@*ARGS[0] // 'data/section.txt');
.Str.say for $parsed&lt;section&gt;;
</code></pre><h4 id="输出">输出</h4>
<pre><code>123,456,789

999,333,666
145,123,120

10,20,30
10,10,10

567,555,578
678,679,665
710,720,715

321,654,987

312,555
</code></pre><h4 id="使用-action">使用 Action</h4>
<pre><code class="language-perl6" data-lang="perl6">use lib '.';
use Section::Grammar;
use Section::Actions;

my $parsed = Section::Grammar.parsefile(
    @*ARGS[0] // 'data/section.txt',
    :actions(Section::Actions)
).made;

.Str.say for @$parsed;
</code></pre><h4 id="输出-1">输出</h4>
<pre><code>123,456,789
999,333,666
145,123,120
10,20,30
10,10,10
567,555,578
678,679,665
710,720,715
321,654,987
312,555
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://ohmypanda.github.io/tags/grammar" term="grammar" label="Grammar" />
                            
                        
                    
                
            
        </entry>
    
</feed>
